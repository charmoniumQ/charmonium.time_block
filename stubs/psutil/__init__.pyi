import collections
import os
from typing import Any, ContextManager, Dict, List, Optional, Union

pmem = collections.namedtuple("pmem", "rss vms shared text lib data dirty")

pfullmem = pmem

class Process:
    def __init__(self, pid: Optional[int] = ...) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def pid(self) -> int: ...
    def oneshot(self) -> ContextManager[None]: ...
    def as_dict(
        self, attrs: Optional[List[str]] = ..., ad_value: Optional[Any] = ...
    ) -> Dict[str, Any]: ...
    def parent(self) -> Optional[Process]: ...
    def parents(self) -> List[Process]: ...
    def is_running(self) -> bool: ...
    def ppid(self) -> int: ...
    def name(self) -> str: ...
    def exe(self) -> str: ...
    def cmdline(self) -> List[str]: ...
    def status(self) -> str: ...
    def username(self) -> str: ...
    def create_time(self) -> float: ...
    def cwd(self) -> str: ...
    def nice(self, value: Optional[int] = ...) -> Optional[int]: ...
    def cpu_affinity(self, cpus: Optional[List[int]] = ...) -> Optional[List[int]]: ...
    def cpu_num(self) -> int: ...
    def environ(self) -> Dict[str, str]: ...
    def num_handles(self) -> int: ...
    def num_ctx_switches(self) -> int: ...
    def num_threads(self) -> int: ...
    def memory_info(self) -> pmem: ...
    def memory_info_ex(self) -> pmem: ...
    def memory_full_info(self) -> pfullmem: ...
    def memory_percent(self, memtype: str = ...) -> float: ...
    def send_signal(self, sig: Optional[int]) -> None: ...
    def suspend(self) -> None: ...
    def resume(self) -> None: ...
    def terminate(self) -> None: ...
    def kill(self) -> None: ...
    def wait(self, timeout: Optional[float] = ...) -> int: ...
